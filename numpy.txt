

!Creating Arrays from Python Lists

# integer array:
*np.array([1, 4, 2, 5, 3])

Remember that unlike Python lists, NumPy is constrained to arrays that all contain the same type. If types do not match, NumPy will upcast if possible (here, integers are up-cast to floating point):

f we want to explicitly set the data type of the resulting array, we can use the dtype keyword:
*np.array([1, 2, 3, 4], dtype='float32')

!arrays creados desde numeros y no una lista

# Create a 3x5 array filled with 3.14
*np.full((3, 5), 3.14)


# Create a 3x3 array of random integers in the interval [0, 10)
*np.random.randint(0, 10, (3, 3))

array de 10 ceros
*np.zeros(10, dtype='int16')


!Data type	   Description
 *  .dtype  dice el typo de algo

bool_ 	Boolean (True or False) stored as a byte
int_  	Default integer type (same as C long; normally either int64 or int32)
intc  	Identical to C int (normally int32 or int64)
intp  	Integer used for indexing (same as C ssize_t; normally either int32 or int64)
int8  	Byte (-128 to 127)
int16	   Integer (-32768 to 32767)
int32	   Integer (-2147483648 to 2147483647)
int64	   Integer (-9223372036854775808 to 9223372036854775807)
uint8	   Unsigned integer (0 to 255)
uint16	   Unsigned integer (0 to 65535)
uint32	   Unsigned integer (0 to 4294967295)
uint64	   Unsigned integer (0 to 18446744073709551615)
float_	   Shorthand for float64.
float16	   Half precision float: sign bit, 5 bits exponent, 10 bits mantissa
float32	   Single precision float: sign bit, 8 bits exponent, 23 bits mantissa
float64  	Double precision float: sign bit, 11 bits exponent, 52 bits mantissa
complex_	   Shorthand for complex128.
complex64	   Complex number, represented by two 32-bit floats